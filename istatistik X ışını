# -*- coding: utf-8 -*-
"""Untitled65.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UqiC-2PpOgEvgkYiDVONfoChiwDZLido
"""

import math
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

def calculate_A(Area, Volume):
    A = Area
    V = Volume
    return A / (math.pi**(1/3) * (6*V)**(2/3))

def calculate_E(a, b, c):
    return (2*a)/(b + c)

def calculate_F(b, c):
    return b/c

def classify_shape(omega, E, F):
    if omega <= 1.15:
        if E < 5 and F < 5:
            return "Sphere"
        else:
            return "Undefined"
    elif 1.15 < omega <= 2.5:
        if E >= 5 and F < 5:
            return "Rod"
        elif E < 5 and F < 5:
            return "Equiaxed"
        elif E < 5 and F >= 5:
            return "Sheet"
        else:
            return "Undefined"
    else:  # omega > 2.5
        return "Complex"


df = pd.read_excel("adadas.xlsx")


omega = calculate_A(df['surfacemarch'], df['volmarch'])
E = calculate_E(df['a'], df['b'], df['c'])
F = calculate_F(df['b'], df['c'])

shapes = [classify_shape(o, e, f) for o, e, f in zip(omega, E, F)]


results_df = pd.DataFrame({
    'Omega': omega,
    'E': E,
    'F': F,
    'Shape_Classification': shapes
})

print("\nParçacık Şekil Dağılımı:")
for shape, count in shape_counts.items():
    print(f"{shape}: {count} adet")

percentages = (shape_counts / len(results_df) * 100).round(2)
print("\nYüzdelik Dağılım:")
for shape, percentage in percentages.items():
    print(f"{shape}: %{percentage}")

plt.figure(figsize=(15, 10))


plt.subplot(2, 2, 1)
shape_counts = results_df['Shape_Classification'].value_counts()
plt.pie(shape_counts, labels=shape_counts.index, autopct='%1.1f%%')
plt.title('Distribution of Particle Shapes')

plt.subplot(2, 2, 2)
results_df.boxplot(column=['Omega', 'E', 'F'])
plt.title('Distribution of Omega, E, and F Values')

plt.subplot(2, 2, 3)
sns.scatterplot(data=results_df, x='Omega', y='E', hue='Shape_Classification')
plt.title('Omega vs E by Shape Classification')

plt.subplot(2, 2, 4)
sns.scatterplot(data=results_df, x='E', y='F', hue='Shape_Classification')
plt.title('E vs F by Shape Classification')

plt.tight_layout()
plt.savefig('particle_analysis_results.png', dpi=300, bbox_inches='tight')
plt.show()

statistical_summary = results_df.groupby('Shape_Classification').agg({
    'Omega': ['count', 'mean', 'std', 'min', 'max'],
    'E': ['mean', 'std', 'min', 'max'],
    'F': ['mean', 'std', 'min', 'max']
}).round(3)

with pd.ExcelWriter('particle_analysis_complete.xlsx') as writer:
    results_df.to_excel(writer, sheet_name='Raw_Data', index=False)
    statistical_summary.to_excel(writer, sheet_name='Statistical_Summary')

    pd.DataFrame(shape_counts).to_excel(writer, sheet_name='Shape_Counts')

print("\nİstatistiksel Özet:")
print(statistical_summary)
