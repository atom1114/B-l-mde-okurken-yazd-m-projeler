# -*- coding: utf-8 -*-
"""493 proje 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X4ixsmh0_Qg5yNl37Mwvwwi5IBUZz0D5
"""

!pip install pyXSteam
from pyXSteam.XSteam import XSteam

steam = XSteam(XSteam.UNIT_SYSTEM_MKS)  # MKS birim sistemi (SI)

# Constants
pi_value = 3.141592653589793
ms = 1  # kg
mp = 20000  # kg/s
A = 1.5859 * 10**6  # kW/m
L = 3  # meter
deltaTp = 15
nth_turbine = 0.88
nth_pump = 0.84
p5 = 155  #
p3 = 77.5
p9 = 3.5
p1 = 0.071
p4 = p1
p10 = p9
p11 = p9
p12 = p9
p13 = p9
pb = p5
p6 = p5
p2 = p3
pa = p3
T6 = 292
Ta = steam.tsat_p(pa )   #(MPa olarak hesaplanır)
Tb = Ta + deltaTp
# Turbine 1 inlet
h3 = steam.hV_p(p3 )
s3 = steam.sV_p(p3 )
s1 = steam.sV_p(p1)
s2 = steam.sV_p(p2)
s5 = steam.sV_p(p5)
s6 = steam.sV_p(p6)
s10 = steam.sV_p(p10)
s12 = steam.sV_p(p12)
s13= steam.sV_p(p13)

# Turbine 1 outlet
h9f = steam.hL_p(p9 )
h9g = steam.hV_p(p9 )
s9f = steam.sL_p(p9 )
s9g = steam.sV_p(p9 )

s9 = s3
x9 = (s9 - s9f) / (s9g - s9f)  # Turbine exit quality
h9s = h9f + (x9 * (h9g - h9f))
h9a = h3 - (nth_turbine * (h3 - h9s))

# Turbine 2 inlet and moisture separator outlet
h11 = steam.hV_p(p11 )
s11 = steam.sV_p(p11 )

# Turbine 2 outlet
h4f = steam.hL_p(p4 )
h4g = steam.hV_p(p4 )
s4f = steam.sL_p(p4)
s4g = steam.sV_p(p4 )

s4 = s11
x4 = (s4 - s4f) / (s4g - s4f)  # Turbine exit quality
h4s = h4f + (x4 * (h4g - h4f))
h4a = h11 - (nth_turbine * (h11 - h4s))

# Moisture separator
m11g = x9 * ms  # Saturated vapor
m12f = (1 - x9) * ms  # Saturated liquid
h12 = steam.hL_p(p12 )  # Saturated liquid entering

# Pump 1
v1 = 1/steam.rhoL_p(p1 )  # Specific volume
h1 = steam.hL_p(p1 )
wpump1 = (v1 * (p13 - p1))*100
h13s = wpump1 + h1
h13a = h1 + (wpump1 / nth_pump)

# Pump 2
v10 = 1 / steam.rhoL_p(p10 )
h10 = steam.hL_p(p10 )
wpump2 = (v10 * (p2 - p10)) * 100
h2s = wpump2 + h10
h2a = h10 + (wpump2 / nth_pump)


f = (h10 - (m11g * h13a + m12f * h12)) / (x9 * (h11 - h13a))
m4 = (1 - f) * x9 * ms
m11d = f * x9 * ms
ha = steam.hL_p(p3)

# Efficiency calculations
qh = ms * (h3 - h2a)
ql = (1 - f) * x9 * ms * (h4a - h1)
wnet = qh - ql
nth = wnet / qh

Taverage=(Tb+T6)/2
h6= (steam.h_pt(p6,T6))
Cpaverage = steam.Cp_pt(p6,Taverage)
Power = (2*A*L)/pi_value
h5= (Power/mp)+h6
T5 = steam.t_ph(p5,h5)
Taverage12=(T5+Tb)/2
cpaverage12=steam.Cp_pt(p6,Taverage12)
a=(h3-ha)/(cpaverage12*(T5-Tb))
ms1= mp/a

# 6.sorunun cevabı
import numpy as np
import matplotlib.pyplot as plt
P0 = 3028845.890993
p = 2.1e-5
r = 1e-4
# (0 < t < 5)
t = np.linspace(0, 5, 100)
P_t = P0 * np.exp((p / r) * t)
# Grafik çizimi
plt.plot(t, P_t, label=r'$P(t) = P_0 \cdot \exp\left(\frac{p}{r} \cdot t\right)$')
plt.xlabel('Time(t)')
plt.ylabel('P(t)')
plt.title('Graph P(t) = P0 * exp((p/r)*t)')
plt.grid(True)
plt.legend()
plt.show()

#2.sorunun cevabı
import numpy as np
import matplotlib.pyplot as plt
z = np.linspace(0, 3, 301)
cp1 = steam.Cp_pt(p5, T6)
Tcoolant = T6 + (((Power / 2) / (mp * cp1)) * (1 - np.cos(np.pi * z / L)))
plt.figure()
plt.plot(z, Tcoolant, 'b-', linewidth=1.5)
plt.xlabel('z (m)')
plt.ylabel('T_{coolant} (°C)')
plt.title('Coolant Temperature Distribution')
plt.grid(True)
plt.show()


print(f'Power: {Power:.6f}')
print(f'ms1: {ms1:.6f}')
print(f'a: {a:.6f}')
print(f'Taverage12: {Taverage12:.6f}')
print(f'cpaverage12: {cpaverage12:.6f}')
print(f'T5: {T5:.6f}')
print(f'cpaverage: {Cpaverage:.6f}')
print(f'cpaverage: {Cpaverage:.6f}')
print(f'ha: {ha:.6f}')
print(f'm12f: {m12f:.6f}')
print(f'm11g: {m11g:.6f}')
print(f'm11d: {m11d:.6f}')
print(f'Ta: {Ta:.6f}')
print(f'f: {f:.6f}')
print(f'v1: {v1:.6f}')
print(f'h1: {h1:.6f}')
print(f'v10: {v10:.6f}')
print(f'h10: {h10:.6f}')
print(f'h2s: {h2s:.6f}')
print(f'h2a: {h2a:.6f}')
print(f'h13s: {h13s:.6f}')
print(f'h13a: {h13a:.6f}')
print(f'h3: {h3:.6f}')
print(f's3: {s3:.6f}')
print(f'h11: {h11:.6f}')
print(f's11: {s11:.6f}')
print(f'h4f: {h4f:.6f}')
print(f'h4g: {h4g:.6f}')
print(f's4f: {s4f:.6f}')
print(f's4g: {s4g:.6f}')
print(f'x4: {x4:.6f}')
print(f'h4s: {h4s:.6f}')
print(f'h4a: {h4a:.6f}')
print(f'h9f: {h9f:.6f}')
print(f'h9g: {h9g:.6f}')
print(f's9f: {s9f:.6f}')
print(f's9g: {s9g:.6f}')
print(f'x9: {x9:.6f}')
print(s1,s2,s3,s4,s5,s6,s9,s10,s11,s12,s13,end="\n")
print(f'h9s: {h9s:.6f}')
print(f'h9a: {h9a:.6f}')
print(f'h12: {h12:.6f}')
print(f'qh: {qh:.6f}')
print(f'ql: {ql:.6f}')
print(f'wnet: {wnet:.6f}')
print(f'nth: {nth:.6f}')
