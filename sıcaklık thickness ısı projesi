# -*- coding: utf-8 -*-
"""Untitled60.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Mxgz3_zmDIhDNcw8RHLGFdeMsfKAh5b1
"""

import numpy as np
import matplotlib.pyplot as plt

# Constants
R = 8.314
time = np.array([0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500, 6000, 6500, 7000, 7500, 8000, 8500])

T = {
    1350: np.array([927.7, 1056.8, 1191.2, 1217.0, 1047.9, 937.5, 1093.5, 998.7, 770.8, 872.2, 850.5, 860.7, 907.8, 875.5, 930.5, 555.3, 319.8, 352.7]),
    1250: np.array([752.3, 822.4, 943.3, 1018.8, 1050.6, 1086.4, 1110.8, 1116.1, 1112.6, 1111.6, 1108.8, 1105.7, 1104.4, 1116.0, 1198.4, 818.0, 304.7, 304.6]),
    1150: np.array([753.6, 834.9, 964.7, 1047.2, 1085.7, 1122.2, 1137.6, 1137.5, 1134.9, 1132.4, 1128.7, 1129.2, 1127.2, 1169.9, 1286.6, 691.6, 273, 273]),
    1050: np.array([804.7, 917.7, 1070.6, 1174.2, 1235.5, 1273.7, 1276.6, 1265.9, 1257.9, 1253.3, 1250.9, 1254.1, 1245.3, 1298.7, 1487.9, 312.0, 282.1, 281.3]),
    950: np.array([813.6, 930.0, 1110.6, 1253.0, 1335.8, 1393.9, 1409.4, 1409.3, 1410.3, 1414, 1411.9, 1409.4, 1404, 1456.3, 1690.5, 331.3, 291.9, 291.7]),
    850: np.array([838.2, 952.8, 1120.6, 1227.4, 1269.9, 1291.4, 1298.7, 1294.4, 1299.9, 1306.3, 1304.7, 1306.8, 1292.9, 1357.4, 1516.8, 396.1, 352.7, 355.9])
}

def get_AB(T):
    if T <= 1798:
        return 2.252e-6, 1.502e5
    elif T <= 1900:
        return 3.371e6, 5.691e5
    else:
        return 8.682e-8, 2.572e6

def get_AB_e(T):
    if T <= 1773:
        return 5.19e-7, 1.2766e5
    else:
        return 17.72e-7, 1.2205e5

def arrhenius_model(A, B, T):
    return A * np.exp(-B / (R * T))

def calc_K2(T, A, B, R):
    return A * np.exp(-B / (R * T))

thickness_profiles_sokolov = {}
thickness_profiles_experimental = {}

for temp, profile in T.items():
    if temp <= 1798:
        A_sokolov = 2.252e-6
        B_sokolov = 1.502e5
    elif temp <= 1900:
        A_sokolov = 3.371e6
        B_sokolov = 5.691e5
    else:
        A_sokolov = 8.682e-8
        B_sokolov = 2.572e6

    if temp <= 1773:
        A_experimental = 5.19e-7
        B_experimental = 1.2766e5
    else:
        A_experimental = 17.72e-7
        B_experimental = 1.2205e5

    thickness_profiles_sokolov[temp] = arrhenius_model(A_sokolov, B_sokolov, profile) * 1e6
    thickness_profiles_experimental[temp] = arrhenius_model(A_experimental, B_experimental, profile) * 1e6

heights = np.linspace(0, 1400, 100)  # mm
time_steps = time
temperature_K = np.zeros((len(time_steps), len(heights)))
thickness = np.zeros((len(time_steps), len(heights)))
thickness_e = np.zeros((len(time_steps), len(heights)))

for t_idx in range(len(time_steps)):
    for h_idx, h in enumerate(heights):
        closest_temp = min(T.keys(), key=lambda x: abs(x - h))
        temperature_K[t_idx, h_idx] = T[closest_temp][t_idx]

for t_idx in range(1, len(time_steps)):
    dt = time_steps[t_idx] - time_steps[t_idx - 1]
    for h_idx in range(len(heights)):
        T_current = temperature_K[t_idx, h_idx]

        A, B = get_AB(T_current)
        K2 = calc_K2(T_current, A, B, R)
        thickness[t_idx, h_idx] = np.sqrt(thickness[t_idx - 1, h_idx]**2 + K2 * dt)

        A, B = get_AB_e(T_current)
        K2_exp = calc_K2(T_current, A, B, R)
        thickness_e[t_idx, h_idx] = np.sqrt(thickness_e[t_idx - 1, h_idx]**2 + K2_exp * dt)

plt.figure(figsize=(16, 10))
for temp in T.keys():
    plt.plot(time, thickness_profiles_experimental[temp], label=f'Experimental {temp}°C')
    plt.plot(time, thickness_profiles_sokolov[temp], linestyle='--', label=f'Sokolov {temp}°C')
plt.title('Thickness Profiles vs Time at Different Temperatures')
plt.xlabel('Time (s)')
plt.ylabel('Thickness (µm)')
plt.legend()
plt.grid()
plt.show()

plt.figure(figsize=(10, 6))
times_to_plot = [2000, 5000, 7500]
for t in times_to_plot:
    t_idx = np.abs(time_steps - t).argmin()
    plt.plot(thickness[t_idx] * 1e6, heights, marker='o', label=f'Sokolov t={t}s')
    plt.plot(thickness_e[t_idx] * 1e6, heights, marker='s', linestyle='-', label=f'Experimental t={t}s')
plt.title('Oxide Layer Thickness vs Height')
plt.xlabel('Thickness (μm)')
plt.ylabel('Height (mm)')
plt.legend()
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 6))
heights_to_plot = [550, 950, 1350]
for h in heights_to_plot:
    h_idx = np.abs(heights - h).argmin()
    plt.plot(time_steps, thickness[:, h_idx] * 1e6, marker='o', label=f'Sokolov h={h}mm')
    plt.plot(time_steps, thickness_e[:, h_idx] * 1e6, marker='o', label=f'Experimental h={h}mm')
plt.title('Oxide Layer Thickness vs Time')
plt.xlabel('Time (s)')
plt.ylabel('Thickness (μm)')
plt.legend()
plt.grid(True)
plt.show()

experimental_heights = np.array([0, 550, 650, 750, 850, 950, 1050, 1150, 1400])
experimental_thickness = np.array([0, 14.08, 32.31, 58.85, 256.70, 943.94, 409.00, 47.72, 0])

plt.figure(figsize=(10, 6))
plt.plot(experimental_thickness / 12, experimental_heights, marker='o', label='Experimental')
plt.plot(thickness[-1] * 1e5, heights, marker='o', label='Calculated (Sokolov)')
plt.plot(thickness_e[-1] * 1e5, heights, marker='o', label='Calculated (Experimental)')
plt.title('Comparison with Experimental Data')
plt.xlabel('Thickness (μm)')
plt.ylabel('Height (mm)')
plt.legend()
plt.grid(True)
plt.show()
