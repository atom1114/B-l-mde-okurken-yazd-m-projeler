# -*- coding: utf-8 -*-
"""Untitled60.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Mxgz3_zmDIhDNcw8RHLGFdeMsfKAh5b1
"""

import pandas as pd
radii = [5.008, 4.554, 5.434, 4.902, 5.109, 4.77, 4.835, 4.975, 0.655, 5.509, 4.623, 5.129, 5.737, 4.918, 4.679, 5.437, 4.712, 4.649, 4.959, 5.956, 4.889, 5.312, 5.119, 5.415, 4.661, 4.968, 4.949, 4.558, 4.239, 4.328, 4.663, 4.597, 3.901, 4.785, 3.736, 4.113, 4.981, 3.893, 4.711, 5.435, 4.583, 4.805, 4.509, 4.887, 3.446, 4.915, 3.389, 4.451, 5.139]

categories = [ ]
for radius in radii:
    if radius < 3.5:
        category = 'Small'
    elif radius < 4:
        category = 'Medium'
    elif radius < 4.5:
        category = 'Large'
    else:
        category = 'X-Large'
    categories.append(category)

results = pd.DataFrame({
    'Radius (cm)': radii,
    'Category': categories
})

counts = results['Category'].value_counts()

print(results)
print("\nMussel Counts by Category:")
print(counts)
the code we created the graph according to the mussel size:
import numpy as np
import matplotlib.pyplot as plt
from scipy import stats
radius_values = [
    4.671, 4.554, 5.434, 4.902, 5.109, 4.770, 4.835, 4.975, 1.655, 5.509,
    4.623, 5.129, 5.737, 4.918, 4.679, 5.437, 4.712, 4.649, 4.959, 5.956,
    4.889, 5.312, 5.119, 5.415, 4.661, 4.968, 4.949, 4.558, 4.239, 4.328,
    4.663, 4.597, 3.901, 4.785, 3.736, 4.113, 4.981, 3.893, 4.711, 5.435,
    4.583, 4.805, 4.509, 4.887, 3.446, 4.915, 3.389, 4.451, 5.139
]
mean = np.mean(radius_values)
std_dev = np.std(radius_values)
plt.figure(figsize=(10, 6))

bins = [0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5]
plt.hist(radius_values, bins=bins, density=True, alpha=0.7, color='skyblue', edgecolor='black')
xmin, xmax = plt.xlim()
x = np.linspace(xmin, xmax, 100)
p = stats.norm.pdf(x, mean, std_dev)
plt.plot(x, p, 'k', linewidth=2)
plt.title('Gaussian Distribution of Radius Values')
plt.xlabel('Radius')
plt.ylabel('Density')
plt.text(0.05, 0.95, f'Mean: {mean:.2f}\nStd Dev: {std_dev:.2f}',
         transform=plt.gca().transAxes,
         verticalalignment='top')
plt.grid(True, linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()
